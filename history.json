[
  {
    "href": "https://en.wikipedia.org/wiki/Heap_(data_structure)",
    "protocol": "https:",
    "hostname": "en.wikipedia.org",
    "pathname": "/wiki/Heap_(data_structure)",
    "notes": [],
    "tags": [
      "heap"
    ],
    "lastVisited": 1481290647620,
    "visits": 2,
    "difficulty": 3
  },
  {
    "href": "http://quiz.geeksforgeeks.org/binary-heap/",
    "protocol": "http:",
    "hostname": "quiz.geeksforgeeks.org",
    "pathname": "/binary-heap/",
    "lastVisited": 1481303301330,
    "difficulty": 1,
    "notes": [
      "Max Heap:\n<a href='http://ideone.com/9Gr3iQ'><a href='http://ideone.com/9Gr3iQ'>http://ideone.com/9Gr3iQ</a></a>",
      "Min Heap:\n<a href='http://ideone.com/HvUBZM'>http://ideone.com/HvUBZM</a>"
    ],
    "visits": 1,
    "tags": []
  },
  {
    "href": "http://www.geeksforgeeks.org/why-is-binary-heap-preferred-over-bst-for-priority-queue/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/why-is-binary-heap-preferred-over-bst-for-priority-queue/",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "heap",
      "bst"
    ],
    "lastVisited": 1481307715113,
    "visits": 3
  },
  {
    "href": "http://quiz.geeksforgeeks.org/how-to-implement-decrease-key-or-change-key-in-binary-search-tree/",
    "protocol": "http:",
    "hostname": "quiz.geeksforgeeks.org",
    "pathname": "/how-to-implement-decrease-key-or-change-key-in-binary-search-tree/",
    "difficulty": 1,
    "notes": [],
    "tags": [
      "bst"
    ],
    "lastVisited": 1481308002525,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/binomial-heap-2/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/binomial-heap-2/",
    "difficulty": 4,
    "notes": [
      "Java: <a href='http://code.geeksforgeeks.org/Pm6rDH'>http://code.geeksforgeeks.org/Pm6rDH</a>",
      "Skew Heaps: <a href='https://en.wikipedia.org/wiki/Skew_heap'>https://en.wikipedia.org/wiki/Skew_heap</a>",
      "Pairing heaps: <a href='https://en.wikipedia.org/wiki/Pairing_heap'>https://en.wikipedia.org/wiki/Pairing_heap</a>"
    ],
    "tags": [
      "heap"
    ],
    "lastVisited": 1481344644179,
    "visits": 7
  },
  {
    "href": "http://quiz.geeksforgeeks.org/heap-sort/",
    "protocol": "http:",
    "hostname": "quiz.geeksforgeeks.org",
    "pathname": "/heap-sort/",
    "difficulty": 1,
    "notes": [
      "Mistakes:\nFirst paragraph: \"3. Repeat above steps until size of heap is greater than 1.\"shouldsay \"while\" instead of \"until\"\n\nInside heapSort function, last statement: \"heapify(arr, i, 0);\" should be \"heapify(arr, i-1, 0);\" else it's possible the element we swapped to the end will get swapped with the new root, during heapification once.\n\nThe second for loop in heapSort function should end on \"i>0\" not i>=0\", there's no point in swapping the same element with itself, then calling heapify on a single element heap."
    ],
    "tags": [],
    "lastVisited": 1481347501056,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/k-largestor-smallest-elements-in-an-array/",
    "difficulty": 3,
    "notes": [
      "Code c++: <a href='https://mytechspaze.com/index.php/2016/07/18/k-largest-elements-array/'>https://mytechspaze.com/index.php/2016/07/18/k-largest-elements-array/</a>"
    ],
    "tags": [
      "heap",
      "order statistics"
    ],
    "lastVisited": 1481348305653,
    "visits": 4
  },
  {
    "href": "http://www.geeksforgeeks.org/kth-largest-element-in-a-stream/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/kth-largest-element-in-a-stream/",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "order statistics",
      "heap"
    ],
    "lastVisited": 1481348529469,
    "visits": 3
  },
  {
    "href": "https://en.wikipedia.org/wiki/Quickselect",
    "protocol": "https:",
    "hostname": "en.wikipedia.org",
    "pathname": "/wiki/Quickselect",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "order statistics"
    ],
    "lastVisited": 1481350245605,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/nearly-sorted-algorithm/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/nearly-sorted-algorithm/",
    "difficulty": 3,
    "notes": [
      "why we need to create heap of k+1 then remove/add for remaining elements ?\nBecause the element is atmost k away from the target position. We create a heap to store k+1 elements. So the element is already in the heap. So if the element is the smallest of the group the we extract the element.\nand to be sure smallest element(first element of sorted out o/p) will always be in first K+1 elements as it can only move k places away from its original position and of course it will root element of minheap."
    ],
    "tags": [
      "heap",
      "sorting"
    ],
    "lastVisited": 1481351222418,
    "visits": 5
  },
  {
    "href": "http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-heap/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/check-if-a-given-binary-tree-is-heap/",
    "difficulty": 3,
    "notes": [
      "Java: <a href='http://code.geeksforgeeks.org/23YCEn'>http://code.geeksforgeeks.org/23YCEn</a>",
      "Just one level order traversal of the given binary tree would be sufficient to check both the properties of binary heap..\n\nTo check Complete binary tree property: Just check no NON NULL value should proceed,once any NULL value is inserted into the queue.\n\nChecking the other property of binary heap is very easy, while inserting the children of a node , just check that they both are less than or greater than the parent."
    ],
    "tags": [
      "heap",
      "binary tree"
    ],
    "lastVisited": 1481352905962,
    "visits": 5
  },
  {
    "href": "http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/check-if-a-given-binary-tree-is-complete-tree-or-not/",
    "notes": [
      "Java: public boolean check(Node root) {\nif (root == null)\nreturn true;\nelse if (root.left == null && root.right != null)\nreturn false;\n\nreturn check(root.left) && check(root.right);\n}",
      "C++: <a href='http://code.geeksforgeeks.org/QwL4Eb'>http://code.geeksforgeeks.org/QwL4Eb</a>"
    ],
    "tags": [
      "binary tree"
    ],
    "lastVisited": 1481352835859,
    "visits": 5,
    "difficulty": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/how-to-check-if-a-given-array-represents-a-binary-heap/",
    "difficulty": 3,
    "notes": [],
    "tags": [
      "heap"
    ],
    "lastVisited": 1481354298954,
    "visits": 13
  },
  {
    "href": "http://www.geeksforgeeks.org/merge-k-sorted-arrays/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/merge-k-sorted-arrays/",
    "difficulty": 3,
    "notes": [
      "Java Code: <a href='http://code.geeksforgeeks.org/JJ9ytn'>http://code.geeksforgeeks.org/JJ9ytn</a>"
    ],
    "tags": [
      "heap",
      "sorting"
    ],
    "lastVisited": 1481358226873,
    "visits": 6
  },
  {
    "href": "http://www.geeksforgeeks.org/print-elements-sorted-order-row-column-wise-sorted-matrix/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/print-elements-sorted-order-row-column-wise-sorted-matrix/",
    "difficulty": 3,
    "notes": [],
    "tags": [
      "heap",
      "sorting"
    ],
    "lastVisited": 1481358297914,
    "visits": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/connect-n-ropes-minimum-cost/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/connect-n-ropes-minimum-cost/",
    "difficulty": 3,
    "notes": [
      "Java: <a href='http://ideone.com/wsTJKT'>http://ideone.com/wsTJKT</a>"
    ],
    "tags": [
      "heap",
      "greedy"
    ],
    "lastVisited": 1481358705012,
    "visits": 4
  },
  {
    "href": "http://www.geeksforgeeks.org/sort-numbers-stored-on-different-machines/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/sort-numbers-stored-on-different-machines/",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "heap"
    ],
    "lastVisited": 1481358903007,
    "visits": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/a-data-structure-question/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/a-data-structure-question/",
    "notes": [
      "Delete from heap: <a href='http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/heap-delete.html'><a href='http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/heap-delete.html'><a href='http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/heap-delete.html'>http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/heap-delete.html</a></a></a>",
      "There is better solution than this I believe:\nWe can use a sorted DLL along with a Hash map (that stores the the value of the node as key and its address in the DLL as its value). \nWith this option we will have the following complexities:\n\nfindMax() ==> O(1)\nfindMin() ==> O(1)\ndeleteMax() ==> O(1)\ndeleteMin() ==> O(1)\nDelete() ==> O(1)\nInsert() ==> O(n)\n\n"
    ],
    "tags": [
      "heap"
    ],
    "lastVisited": 1481372082650,
    "visits": 10,
    "difficulty": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/tournament-tree-and-binary-heap/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/tournament-tree-and-binary-heap/",
    "notes": [
      "<a href='https://www.youtube.com/watch?v=7WGaT0-gYCQ'>https://www.youtube.com/watch?v=7WGaT0-gYCQ</a>",
      "To get kth largest element: Another simple strategy is based on some of the same concepts as the hash table. When we know the range of values beforehand, we can divide that range into h subintervals and assign these to h buckets. When we insert an element, we add it to the bucket corresponding to the interval it falls in. To find the minimum or maximum element, we scan from the beginning or end for the first nonempty bucket and find the minimum or maximum element in that bucket. In general, to find the kth element, we maintain a count of the number of elements in each bucket, then scan the buckets from left to right adding up counts until we find the bucket containing the desired element, then use the expected linear-time algorithm to find the correct element in that bucket."
    ],
    "tags": [
      "heap",
      "tree",
      "sorting",
      "order statistics"
    ],
    "lastVisited": 1481386916551,
    "visits": 7,
    "difficulty": 4
  },
  {
    "href": "http://www.geeksforgeeks.org/to-find-smallest-and-second-smallest-element-in-an-array/#comment-2541",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/to-find-smallest-and-second-smallest-element-in-an-array/",
    "difficulty": 3,
    "notes": [
      "It can be done in n + logn -2 comparison.\nTrick : store all pairs being compared.\nSteps :\n1. Pair it in groups of 2 and compare each group and store the pair.\n2. Again Pair and Compare till you have only one element left.\n3. Comparisons made till now = n/2 + ..+1 = n-1 and you have smallest element\n4. now find second minimum using same technique from stored pairs which include smallest element, total number of such pairs = logn because smallest element has been compared exactly logn times(height of comparison tree) .\n5.Comparison made for second minimum = logn-1\nSo total = n-1 + logn-1\n<a href='http://quickinfobox.blogspot.in/2016/03/an-optimised-approach-to-find-second.html'>http://quickinfobox.blogspot.in/2016/03/an-optimised-approach-to-find-second.html</a>",
      "<a href='http://stackoverflow.com/questions/3628718/find-the-2nd-largest-element-in-an-array-with-minimum-number-of-comparisons/3628777#3628777'>http://stackoverflow.com/questions/3628718/find-the-2nd-largest-element-in-an-array-with-minimum-number-of-comparisons/3628777#3628777</a>"
    ],
    "tags": [
      "order statistics"
    ],
    "lastVisited": 1481387248918,
    "visits": 5
  },
  {
    "href": "http://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/detect-and-remove-loop-in-a-linked-list/",
    "notes": [
      "In method 2 step 3, kth node is 0 indexed. Or think of it as move k times starting from root.",
      "to reduce time complexity we can do this problem in simple n steps, in O(n) complexity, we just have to do is introduce a boolean in Node as ( boolean isVisited = false; ), go through linked list, mark isVisited = true for the node on which you are currently and check that if this.next.isVisited == false then keep moving else <a href='http://this.next'>http://this.next</a> = null;"
    ],
    "tags": [
      "linked list"
    ],
    "lastVisited": 1481389254489,
    "visits": 5,
    "difficulty": 4
  },
  {
    "href": "http://www.geeksforgeeks.org/rotate-a-linked-list/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/rotate-a-linked-list/",
    "difficulty": 3,
    "notes": [],
    "tags": [
      "linked list"
    ],
    "lastVisited": 1481389388420,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/split-a-circular-linked-list-into-two-halves/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/split-a-circular-linked-list-into-two-halves/",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "linked list"
    ],
    "lastVisited": 1481389553959,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/convert-a-binary-tree-to-a-circular-doubly-link-list/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/convert-a-binary-tree-to-a-circular-doubly-link-list/",
    "difficulty": 3,
    "notes": [],
    "tags": [
      "binary tree"
    ],
    "lastVisited": 1481389738327,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/quicksort-for-linked-list/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/quicksort-for-linked-list/",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "linked list"
    ],
    "lastVisited": 1481391190937,
    "visits": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/check-for-balanced-parentheses-in-an-expression/",
    "difficulty": 1,
    "notes": [],
    "tags": [
      "stack"
    ],
    "lastVisited": 1481391329230,
    "visits": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/implement-stack-using-queue/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/implement-stack-using-queue/",
    "difficulty": 3,
    "notes": [],
    "tags": [
      "stack",
      "queue"
    ],
    "lastVisited": 1481396183990,
    "visits": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/queue-using-stacks/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/queue-using-stacks/",
    "difficulty": 3,
    "notes": [],
    "tags": [
      "stack",
      "queue"
    ],
    "lastVisited": 1481398686339,
    "visits": 7,
    "title": "implement queue using stacks"
  },
  {
    "href": "http://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/dynamic-programming-set-3-longest-increasing-subsequence/",
    "title": "dynamic programming | set 3 (longest increasing subsequence)",
    "difficulty": 2,
    "notes": [],
    "tags": [
      "dp"
    ],
    "lastVisited": 1481399607284,
    "visits": 2
  },
  {
    "href": "http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/dynamic-programming-set-4-longest-common-subsequence/",
    "title": "dynamic programming | set 4 (longest common subsequence)",
    "notes": [
      "Java: <a href='http://code.geeksforgeeks.org/iCtwby'>http://code.geeksforgeeks.org/iCtwby</a>",
      "All LCS : <a href='http://code.geeksforgeeks.org/7pwkQz'>http://code.geeksforgeeks.org/7pwkQz</a>",
      "Less space: <a href='http://ideone.com/BOnvwD'>http://ideone.com/BOnvwD</a>"
    ],
    "tags": [
      "dp"
    ],
    "lastVisited": 1481453438662,
    "visits": 5,
    "difficulty": 3
  },
  {
    "href": "http://www.geeksforgeeks.org/printing-longest-common-subsequence/",
    "protocol": "http:",
    "hostname": "www.geeksforgeeks.org",
    "pathname": "/printing-longest-common-subsequence/",
    "title": "printing longest common subsequence",
    "difficulty": 2,
    "notes": [
      "LCS prob: <a href='http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/'>http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/</a>"
    ],
    "tags": [
      "dp"
    ],
    "lastVisited": 1481453007800,
    "visits": 3
  }
]
